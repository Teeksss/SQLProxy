name: SQLProxy Full CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE: ghcr.io/teeksss/sqlproxy

jobs:
  # 1. Compile and lint step
  compile-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Compile check
        run: |
          python -m compileall sqlproxy tests
      
      - name: Lint
        run: |
          pip install flake8 black isort
          flake8 sqlproxy tests
          black --check sqlproxy tests
          isort --check sqlproxy tests
  
  # 2. Test step (parallel)
  test:
    needs: compile-lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        test-group: ['unit', 'integration', 'performance']
      fail-fast: false
      
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-xdist
          pip install numpy pandas scipy
          pip install -e .
      
      - name: Run ${{ matrix.test-group }} tests
        run: |
          python -m pytest tests/ -m ${{ matrix.test-group }} -v --cov=sqlproxy --cov-report=xml:coverage-${{ matrix.test-group }}.xml
      
      - name: Upload coverage for ${{ matrix.test-group }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.test-group }}
          path: coverage-${{ matrix.test-group }}.xml
  
  # 3. Coverage merge
  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install coverage
        run: |
          python -m pip install --upgrade pip
          pip install coverage
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports
      
      - name: Merge coverage reports
        run: |
          coverage combine coverage-reports/coverage-*/*.xml
          coverage report
          coverage xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
  
  # 4. Build and push
  build:
    needs: coverage
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    if: github.event_name != 'pull_request'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set Docker tag
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="${{ github.sha }}"
          fi
          echo "image-tag=${TAG}" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.set-tag.outputs.image-tag }}
            ${{ env.DOCKER_IMAGE }}:${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
  
  # 5. Deployment
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Setup kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Deploy to environment
        env:
          ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        run: |
          envsubst < k8s/deployment-${ENV}.yaml | kubectl apply -f -
          kubectl rollout status deployment/sqlproxy-${ENV}