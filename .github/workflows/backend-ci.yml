name: Backend CI/CD (Python Poetry & Docker)

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/backend-ci.yml'
    tags:
      - 'v*.*.*'
  pull_request:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  build_and_test_backend: # Renamed for clarity, was 'build_and_test'
    name: Build, Lint, and Test Backend (Poetry)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend # All backend operations happen here

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true # Recommended for CI
        virtualenvs-in-project: true # Easier to cache
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: ./backend/.venv # Path to Poetry's virtualenv if virtualenvs-in-project is true
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies with Poetry
      # Only run if cache wasn't hit or if it's a PR (to ensure fresh install for PR checks)
      # For PRs, we always want to run install to catch issues with new/changed dependencies in poetry.lock
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' || github.event_name == 'pull_request'
      run: poetry install --no-interaction --no-root # --no-root if project itself is not installed as editable

    # Linting and Testing using Poetry's environment
    - name: Check formatting with Black (via Poetry)
      run: poetry run black --check .

    - name: Lint with Flake8 (via Poetry)
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with Pytest (via Poetry)
      run: poetry run pytest

    # This job no longer builds the final Docker image, only a test one if needed for PRs
    # The final image build (with frontend) is done in the release job
    - name: Set up Docker Buildx
      if: github.event_name == 'pull_request' # Only for PRs, if you want to test Docker build
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (for PRs, no frontend assets, uses Poetry)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./backend # Context for backend-only Dockerfile
        file: ./backend/Dockerfile # Assuming a Dockerfile optimized for Poetry
        push: false
        tags: local/sqlproxy-backend-pr-test:latest

  build_frontend_and_package_release: # Renamed for clarity, was 'build_and_push_docker_image'
    name: Build Frontend & Package Release (Docker with Poetry)
    runs-on: ubuntu-latest
    needs: build_and_test_backend
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 1: Build Frontend Assets
    - name: Set up Node.js for Frontend Build
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    - name: Build Frontend Application
      working-directory: ./frontend
      run: npm run build # Output to ./frontend/dist

    # Step 2: Backend Docker Build and Push (using Poetry)
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/sqlproxy-backend
    - name: Build and push Backend Docker image (Poetry, with frontend assets)
      uses: docker/build-push-action@v5
      with:
        context: . # Docker build context is the repository root
        file: ./backend/Dockerfile.release # Using a specific Dockerfile for releases with Poetry multi-stage
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}