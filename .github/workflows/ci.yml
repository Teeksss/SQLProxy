# CI/CD Workflow for SQL Proxy
# Last updated: 2025-05-20 12:09:27
# Updated by: Teeksss

name: SQL Proxy CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev

      - name: Run linting
        run: |
          flake8 backend
          black --check backend
          isort --check backend

      - name: Run backend tests
        run: |
          pytest backend/tests/ --cov=backend --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Run linting
        working-directory: frontend
        run: |
          yarn lint
          yarn prettier:check

      - name: Run frontend tests
        working-directory: frontend
        run: yarn test --coverage

      - name: Build frontend
        working-directory: frontend
        run: yarn build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - uses: actions/checkout@v3

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'SQL Proxy'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --suppression suppression.xml
            --exclude "frontend/node_modules/**"

      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports

      - name: Run Snyk
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'

    environment:
      name: staging
      url: https://staging.sqlproxy.example.com

    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name sql-proxy-staging --region us-west-2

      - name: Deploy to staging
        run: |
          helm upgrade --install sql-proxy ./helm \
            --namespace sql-proxy-staging \
            --create-namespace \
            --set imageTag=${{ github.sha }} \
            --set api.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend \
            --set frontend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend \
            --set environment=staging \
            --values ./helm/values-staging.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/sql-proxy-api -n sql-proxy-staging
          kubectl rollout status deployment/sql-proxy-frontend -n sql-proxy-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: https://sqlproxy.example.com

    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name sql-proxy-production --region us-west-2

      - name: Deploy to production
        run: |
          helm upgrade --install sql-proxy ./helm \
            --namespace sql-proxy-production \
            --create-namespace \
            --set imageTag=${GITHUB_REF#refs/tags/} \
            --set api.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend \
            --set frontend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend \
            --set environment=production \
            --values ./helm/values-production.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/sql-proxy-api -n sql-proxy-production
          kubectl rollout status deployment/sql-proxy-frontend -n sql-proxy-production

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            CHANGELOG.md