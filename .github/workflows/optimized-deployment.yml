name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE: ghcr.io/teeksss/sqlproxy

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
      
      - name: Check code quality
        run: |
          black --check --diff .
          isort --check-only --diff .
          flake8 .
          mypy sqlproxy
  
  test:
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          pip install -e .
      
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=sqlproxy --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
  
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    
    steps:
      - uses: actions/checkout@v3
      
      # Set tag based on git ref
      - name: Set Docker tag
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="${{ github.sha }}"
          fi
          echo "image-tag=${TAG}" >> $GITHUB_OUTPUT
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.set-tag.outputs.image-tag }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
  
  # Staging deployment with canary release
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      # Deploy 20% traffic to canary first
      - name: Deploy canary to staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Deploy 20% traffic to new version
            export IMAGE_TAG=${{ needs.build.outputs.image-tag }}
            export CANARY_WEIGHT=20
            
            # Update canary deployment
            kubectl set image deployment/sqlproxy-canary sqlproxy=${{ env.DOCKER_IMAGE }}:${IMAGE_TAG}
            kubectl scale deployment sqlproxy-canary --replicas=2
            
            # Update traffic weight
            kubectl apply -f <(envsubst < canary-ingress.yaml)
      
      # Wait and check metrics/logs
      - name: Verify canary deployment
        run: |
          sleep 60
          # Webhook to check metrics and logs would go here
          # If validation passes, continue to full deployment
      
      # Deploy 100% traffic to new version
      - name: Deploy full to staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            export IMAGE_TAG=${{ needs.build.outputs.image-tag }}
            
            # Update main deployment
            kubectl set image deployment/sqlproxy-main sqlproxy=${{ env.DOCKER_IMAGE }}:${IMAGE_TAG}
            
            # Update traffic weight to 100%
            export CANARY_WEIGHT=0
            kubectl apply -f <(envsubst < canary-ingress.yaml)
            
            # Scale down canary
            kubectl scale deployment sqlproxy-canary --replicas=0
  
  # Production deployment with blue/green
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      # Blue/Green deployment
      - name: Deploy Blue/Green to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            export IMAGE_TAG=${{ needs.build.outputs.image-tag }}
            
            # Determine current environment (blue or green)
            CURRENT_ENV=$(kubectl get service sqlproxy-prod -o jsonpath='{.spec.selector.environment}')
            
            if [ "$CURRENT_ENV" == "blue" ]; then
              NEW_ENV="green"
            else
              NEW_ENV="blue"
            fi
            
            echo "Current environment: $CURRENT_ENV, deploying to: $NEW_ENV"
            
            # Deploy to new environment
            kubectl set image deployment/sqlproxy-$NEW_ENV sqlproxy=${{ env.DOCKER_IMAGE }}:${IMAGE_TAG}
            kubectl scale deployment sqlproxy-$NEW_ENV --replicas=3
            
            # Wait for deployment to be ready
            kubectl rollout status deployment/sqlproxy-$NEW_ENV --timeout=300s
            
            # Switch traffic to new environment
            kubectl patch service sqlproxy-prod -p '{"spec":{"selector":{"environment":"'$NEW_ENV'"}}}'
            
            # Keep both environments running for quick rollback if needed