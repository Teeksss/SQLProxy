apiVersion: apps/v1
kind: Deployment
metadata:
  name: sqlproxy-staging
  namespace: sqlproxy
  labels:
    app: sqlproxy
    environment: staging
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sqlproxy
      environment: staging
  template:
    metadata:
      labels:
        app: sqlproxy
        environment: staging
    spec:
      containers:
      - name: sqlproxy
        image: ghcr.io/teeksss/sqlproxy:${IMAGE_TAG}
        ports:
        - containerPort: 8000
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: sqlproxy-db-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: sqlproxy-db-credentials
              key: port
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: sqlproxy-db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sqlproxy-db-credentials
              key: password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: sqlproxy-db-credentials
              key: database
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: sqlproxy-config
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: sqlproxy-config
              key: redis-port
        - name: ENVIRONMENT
          value: "staging"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "250m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: sqlproxy-staging
  namespace: sqlproxy
spec:
  selector:
    app: sqlproxy
    environment: staging
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sqlproxy-staging-ingress
  namespace: sqlproxy
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - staging.sqlproxy.example.com
    secretName: sqlproxy-staging-tls
  rules:
  - host: staging.sqlproxy.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sqlproxy-staging
            port:
              number: 80